---
title: "STAT570 - Final Project"
author: "Miray Çınar"
format: html
editor: visual
toc: true
code-fold: "show"
highlight-style: "breeze"
eval: true
echo: true
theme: "lux"
---

## Introduction

\-\-\--

## Data Description

\-\-\--

## Import the Data

Let's start by importing the data. Fist, import the required libraries. If you don't already have them, you can use `install.packages()` function.

```{r}

library(tidyverse)
library(readr)

Uncleaned_DS_jobs <- read_csv("Uncleaned_DS_jobs.csv")
```

Let's start by investigating our dataset a little bit, by getting a glimpse and see the structure of the data:

```{r}
library(dplyr)
glimpse(Uncleaned_DS_jobs)
```

And also take a quick summary:

```{r}
summary(Uncleaned_DS_jobs)
```

From both `glimpse()` and `summary()` outputs, we can see that, categorical variables are in character form so we have to change them into factor variables.

But first, let's change the column names that have blank spaces so that it will be much easy to make the analyses later.

```{r}
Uncleaned_DS_jobs <- Uncleaned_DS_jobs %>% 
  rename(Job_Title = `Job Title`, 
         Salary_Estimate = `Salary Estimate`,
         Job_Description = `Job Description`,
         Company_Name = `Company Name`, 
         Type_of_Ownership =  `Type of ownership`)
```

Now that we have clean names for our columns, we can transform characters into factors.

```{r}
Uncleaned_DS_jobs <- Uncleaned_DS_jobs %>% 
  mutate(Job_Title = as.factor(Job_Title),
         Salary_Estimate = as.factor(Salary_Estimate),
         Company_Name = as.factor(Company_Name), 
         Location = as.factor(Location), 
         Headquarters = as.factor(Headquarters),
         Size = as.factor(Size), 
         Type_of_Ownership = as.factor(Type_of_Ownership), 
         Industry = as.factor(Industry),
         Sector = as.factor(Sector), 
         Revenue = as.factor(Revenue), 
         Competitors = as.factor(Competitors)) 
```

Take a summary again to see the data:

```{r}
summary(Uncleaned_DS_jobs)
```

From our summary, we can see some strange values are present in the data. For instance there are some rows marked as "-1" in the Headquarters, Founded, Type_of_Ownership, Industry, Sector and Competitors columns.

Let's see if this are the same rows or not:

```{r}
Uncleaned_DS_jobs[Uncleaned_DS_jobs$Headquarters == '-1',]
```

We realized that from the summary function rating has a minimum value as -1 but this is not right, with the view function we see that are some -1 for the rating.

```{r}
view(Uncleaned_DS_jobs)

```

We need to fix that problem.

To fix this, first we need to look how many data are there with rating -1

```{r}
sum(Uncleaned_DS_jobs$Rating == -1)
```

We have 50 values with ratings -1.

And after looking in a more detailed way, we realize that the foundation year of the companies have a value -1 also we need check for them

```{r}
sum(Uncleaned_DS_jobs$Founded == -1)

```

And we can look how many rows have -1 foundation year and -1 rating

```{r}
sum(Uncleaned_DS_jobs$Founded == -1 & Uncleaned_DS_jobs$Rating == -1)
```

Foundation year and rating variable should not be -1. So firstly we can give them a NA value and we can impute them by using mean.

```{r}

Uncleaned_DS_jobs$Rating[Uncleaned_DS_jobs$Rating == -1] <- NA
Uncleaned_DS_jobs$Founded[Uncleaned_DS_jobs$Founded == -1] <- NA

```

Now we can use mean imputation method

```{r}
rating_mean <- mean(Uncleaned_DS_jobs$Rating, na.rm = TRUE)
Uncleaned_DS_jobs$Rating[is.na(Uncleaned_DS_jobs$Rating)] <- rating_mean
```

Now lets check if it worked,

```{r}
summary(Uncleaned_DS_jobs$Rating)
```

As can be seen from the summary of the rating we fix the -1 problem.

And we can do this same process the founded variable

```{r}
founded_mean <- mean(Uncleaned_DS_jobs$Founded, na.rm = TRUE)
Uncleaned_DS_jobs$Founded[is.na(Uncleaned_DS_jobs$Founded)] <- founded_mean
```

```{r}
summary(Uncleaned_DS_jobs$Founded)
```

From the summary we also fix the problem for founded.

As can be seen from the summary that we have -1 for the size. But we have unknown category for this variable.

```{r}
summary(Uncleaned_DS_jobs$Size)
```

So we can assign -1 to unknown category for this variable

```{r}
Uncleaned_DS_jobs$Size[Uncleaned_DS_jobs$Size == -1] <- "Unknown"
```

```{r}
summary(Uncleaned_DS_jobs$Size)
```

There are -1 values in competitors. We don't know their competitors' name so we can attribute them to no information

```{r}
Uncleaned_DS_jobs$Competitors <- as.character(Uncleaned_DS_jobs$Competitors)


Uncleaned_DS_jobs$Competitors[Uncleaned_DS_jobs$Competitors == "-1"] <- "No information"

```

```{r}
summary(Uncleaned_DS_jobs$Competitors)
```

For the headquarters we have -1 values also,

```{r}
sum(Uncleaned_DS_jobs$Headquarters == -1)

```

```{r}
Uncleaned_DS_jobs$Headquarters<- as.character(Uncleaned_DS_jobs$Headquarters)


Uncleaned_DS_jobs$Headquarters[Uncleaned_DS_jobs$Headquarters == "-1"] <- "No information"
```

When we look at the job description column,

We have so many different values but we can differentiate them into other columns like we can say that a job wants the skill sql.

To do that we can,
